//
//	NOTE: This will NOT work correctly if used to map for Quake 2.
//
// 	Quake 2 for DarkPlaces game definition file (.fgd)
//
// 	Based on work originally written by by autolycus
// 	Special thanks to: Disruptor, Zoid, Zaphod, Imaginos, and EutecTic.
//
// 	Lasted updated by xaGe : 20200415

// 	Q2DP differs a bit from regular Q2 as it's based on Quake 1 and takes advantage of Q3 BSP.
// 	This FGD reflects those differences (lights, misc_model) as well as adds support for some extra features.
// 	Q2DP additions/changes by MrC (so you know who to blame if this doesn't work well)
//	01.23.22 (MM.DD.YY)


//
// worldspawn
//

// 0302 - added "nextmap" key
@SolidClass = worldspawn : "World entity"
[
	sky(string) : "Environment map name"
	skyaxis(string) : "Vector axis for rotating sky"
	skyrotate(string) : "Speed of rotation (degrees/second)"
	sounds(integer) : "CD Track Number" : 1
	gravity(integer) : "Gravity" : 800
	message(string) : "Level name"
	nextmap(string) : "Next map (DM only)"
]

//
// base marker definitions
//model({ "path": ":models/items/keys/target/tris.md2" }) =

@baseclass = Appearflags [
	spawnflags(Flags) =
	[
		256 : "Not in Easy" : 0
		512 : "Not in Normal" : 0
		1024 : "Not in Hard" : 0
		2048 : "Not in Deathmatch" : 0
	]
]
@baseclass = Angle [ angle(integer) : "Direction" ]
@baseclass = Targetname [ targetname(target_source) : "Name" ]
@baseclass = Target [
	target(target_destination) : "Target"
	killtarget(target_destination) : "Killtarget"
]

//
// player start, deathmatch, coop, deathmatch intermission
//

@baseclass base(Appearflags, Targetname) size(-16 -16 -24, 16 16 32) color(0 255 0) model({ "path": ":models/monsters/insane/tris.md2", "frame":209, "skin":1}) = PlayerClass []
@PointClass base(PlayerClass) = info_player_start : "Player 1 start" []
@PointClass base(PlayerClass) = info_player_start2 : "Player episode return point" []
@PointClass base(PlayerClass) = info_player_deathmatch : "Player deathmatch start" []
@PointClass base(PlayerClass) = info_player_coop : "Player cooperative start" [
  coopId(integer) : "Coop Player Id" : 0
  isActive(integer) : "isActive" : 0
  spawnflags(Flags) = [
    1 : "Start InActive"
  ]
]
@PointClass base(PlayerClass) = info_player_intermission : "Deathmatch intermission point"
[
	angles(string) : "pitch yaw roll"
]

@PointClass size(-32 -32 0, 32 32 64) base(PlayerClass, Targetname) = info_teleport_destination : "Teleporter destination" []

@BaseClass base(Appearflags, Target) color(76 76 255) size(-16 -16 -16, 16 16 16) = Ammo[]

@PointClass base(Ammo) model({ "path": ":models/items/ammo/shells/medium/tris.md2" }) = ammo_shells : "Shotgun ammo" 
[
	aflag(integer) : "Ammo Count" : 10
]
@PointClass base(Ammo) model({ "path": ":models/items/ammo/bullets/medium/tris.md2" }) = ammo_bullets : "Machine/Chain gun ammo" 
[
	aflag(integer) : "Ammo Count" : 50
]
@PointClass base(Ammo) model({ "path": ":models/items/ammo/cells/medium/tris.md2" }) = ammo_cells : "Blaster/BFG ammo" 
[
	aflag(integer) : "Ammo Count" : 50
]
@PointClass base(Ammo) model({ "path": ":models/items/ammo/grenades/medium/tris.md2" }) = ammo_grenades : "Grenades" 
[
	aflag(integer) : "Ammo Count" : 10
]
@PointClass base(Ammo) model({ "path": ":models/items/ammo/rockets/medium/tris.md2" }) = ammo_rockets : "Rockets" 
[
	aflag(integer) : "Ammo Count" : 5
]
@PointClass base(Ammo) model({ "path": ":models/items/ammo/slugs/medium/tris.md2" }) = ammo_slugs : "Rail gun ammo" 
[
	aflag(integer) : "Ammo Count" : 10
]

// 0221 - added "pathtarget"
// 0221 - changed "sounds" information
@SolidClass base(Appearflags, Target, Targetname) color(0 128 204) = func_button : "Button"
[
	spawnflags(Flags) =
	[
		1 : "Remove Key" : 0
		2 : "Key Pyramid" : 0
		16 : "Key Data Spinner" : 0
		64 : "Key Security Pass" : 0
		128 : "Key Data CD" : 0
		4096 : "Key Blue" : 0
		8192 : "Key Red" : 0
		16384 : "Key Head" : 0
		32768 : "Key Power Cube" : 0
	]
	pathtarget(string) : "Elevator level target"
	speed(integer) : "Speed" : 40
	wait(choices) : "Wait before reset" : 1 =
	[
		-1 : "Never Return"
	]
	lip(integer) : "Lip remaining after move" : 4
	health(integer) : "Health (shootable)"
	sounds(choices) : "Sounds" : 2 =
	[
		1 : "Silent"
		2 : "Steam Metal"
		3 : "Wodden Clunk"
		4 : "Metallic Click"
		5 : "In-Out"
	]
	message(string) : "Activation message"
	_minlight(integer) : "Minimum light (optional)"
]

@SolidClass base(Angle, Appearflags, Targetname, Target) color(0 128 204) = func_door : "Door"
[
	spawnflags(Flags) =
	[
		1 : "Start Open" : 0
		2 : "Key Pyramid" : 0
		4 : "Crusher" : 0
		8 : "No Monsters" : 0
		16 : "Key Data Spinner" : 0
		32 : "Toggle" : 0
		64 : "Key Security Pass" : 0
		128 : "Key Data CD" : 0
		//256 - 2048 Appearflags
		4096 : "Key Blue" : 0
		8192 : "Key Red" : 0
		16384 : "Key Commander Head" : 0
		32768 : "Key Data Cube" : 0
	]
	team(string) : "Team"
	message(string) : "Trigger message"
	health(integer) : "Health (shootable)"
	speed(integer) : "Speed" : 100
	wait(choices) : "Wait before close" : 3 =
	[
		-1 : "Stay open"
	]
	lip(integer) : "Lip remaining after move" : 8
	dmg(integer) : "Damage when blocked" : 2
	sounds(choices) : "Sounds" : 5 =
	[
		1 : "Silent"
		2 : "Light"
		3 : "Medium"
		4 : "Heavy"
		5 : "Q2 Default"
	]
	_minlight(integer) : "Minimum light (optional)"
]

// 0221 - added "killtarget" and "target" keys
// 0221 - updated "sounds" info
// 0221 - removed "lip" key
@SolidClass base(Appearflags, Targetname, Target) color(0 128 204) = func_door_rotating : "Rotating Door"
[
	spawnflags(Flags) =
	[
		1 : "Start Open" : 0
		2 : "Reverse" : 0
		4 : "Crusher" : 0
		8 : "No Monsters" : 0
		16 : "Animated" : 0
		32 : "Toggle" : 0
		64 : "X Axis" : 0
		128 : "Y Axis" : 0
	]
	team(string) : "Team"
	distance(integer) : "Degrees of rotation" : 90
	message(string) : "Trigger message"
	health(integer) : "Health (shootable)"
	speed(integer) : "Speed" : 100
	wait(choices) : "Wait before close" : 3 =
	[
		-1 : "Stay open"
	]
	dmg(integer) : "Damage when blocked" : 2
	sounds(choices) : "Sounds" : 0 =
	[
		0 : "Audible"
		1 : "Silent"
	]
//	sounds(choices) : "Sounds" : 3 =
//	[
//		1 : "Silent"
//		2 : "Light"
//		3 : "Medium"
//		4 : "Heavy"
//	]
	_minlight(integer) : "Minimum light (optional)"
]

// 0221 - added "_minlight" key (even tho you dont want it to stand out)
// 0221 - added "message" key
// 0221 - removed "team" key
@SolidClass base(Angle, Appearflags, Targetname) color(0 128 204) = func_door_secret : "Secret Door"
[
	spawnflags(Flags) =
	[
		1 : "Always shoot" : 0
		2 : "1st Left" : 0
		4 : "1st Down" : 0
	]
	dmg(integer) : "Damage when blocked" : 2
	wait(choices) : "Wait before close" : 5 =
	[
		-1 : "Stay open"
	]
	message(string) : "Message"
	_minlight(integer) : "Minimum light (optional)"
]

// 0221 - added "_minlight" key (even tho you dont want it to stand out)
@SolidClass base(Appearflags, Targetname, Target) color(0 128 204) = func_explosive : "Exploding/Breakable brush"
[
	spawnflags(Flags) =
	[
		1 : "Heal" : 0
	]
	health(integer) : "Health" : 100
	mass(integer) : "Mass (debris)" : 75
	count(integer) : "How many pieces to spawn" : 5
	dmg(integer) : "Damage" : 0
	material(Choices) : "Material" : 0 =
	[
		1 : "Normal"
		2 : "Flesh"
		3 : "Metal"
		4 : "Flaming"
		5 : "Glass"
		6 : "Wood"
	]
	_minlight(integer) : "Minimum light (optional)"
]

//@SolidClass base(Appearflags, Targetname) color(255 0 0) = func_killbox : "Instant death" []

// 0221 - added "_minlight" key
//@SolidClass base(Appearflags, Targetname) color (0 128 204) = func_object : "Solid bmodel, will fall if its support is removed"
//[
//	spawnflags(Flags) =
//	[
//		1 : "Trigger Spawn" : 0
//		2 : "Animated" : 0
//		4 : "Animated Fast" : 0
//	]
//	_minlight(integer) : "Minimum light (optional)"
//]

// 0221 - removed "sounds" key
@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_plat : "Platform"
[
	spawnflags(Flags) =
	[
		1 : "Plat Low Trigger" : 0
	]
	speed(integer) : "Speed" : 100
	accel(integer) : "Acceleration" : 500
	lip(integer) : "Lip remaining after move" : 8
	height(integer) : "Movement distance"
	_minlight(integer) : "Minimum light (optional)"
]

// 0222 - added "team" key
@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_rotating : "Rotating brush"
[
	spawnflags(Flags) =
	[
		1 : "Start On" : 0
		2 : "Reverse" : 0
		4 : "X Axis" : 0
		8 : "Y Axis" : 0
		16 : "Pain on Touch" : 0
		32 : "Block Stops" : 0
		64 : "Animated" : 0
		128 : "Animated Fast" : 0
	]
	team(string) : "Team"
	speed(integer) : "Speed" : 100
	dmg(integer) : "Damage when blocked" : 2
	_minlight(integer) : "Minimum light (optional)"
]

@PointClass base(Appearflags, Targetname, Target) color(76 25 153) size(-8 -8 -8, 8 8 8) = func_timer : "Timer"
[
	spawnflags(Flags) =
	[
		1 : "Start On" : 0
	]
	wait(integer) : "Base wait time" : 1
	random(integer) : "Wait variance (+/-)"
	delay(integer) : "Delay before first firing"
	pausetime(integer) : "Additional delay"
]

// 0219 - added "team" key
@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_train : "Moving platform"
[
	spawnflags(Flags) =
	[
		1 : "Start On" : 0
		2 : "Toggle" : 0
		4 : "Block Stops" : 0
	]
	target(string) : "First stop target"
	team(string) : "Team"
	speed(integer) : "Speed" : 100
	dmg(integer) : "Damage when blocked" : 2
	noise(string) : "Sound (path/file.wav)"
	_minlight(integer) : "Minimum light (optional)"
]

// 0221 - added a "_minlight" key
@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_wall : "Solid Wall"
[
	spawnflags(Flags) =
	[
		1 : "Trigger Spawn" : 0
		2 : "Toggle" : 0
		4 : "Start On" : 0
		8 : "Animated" : 0
		16 : "Animated Fast" : 0
	]
	_minlight(integer) : "Minimum light (optional)"
]

// must never be transparent?
//
// 0221 - added a "_minlight" key
//@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_water : "Moveable water"
//[
//	spawnflags(Flags) =
//	[
//		1 : "Start Open" : 0
//	]
//	speed(integer) : "Speed" : 25
//	wait(choices) : "Wait before return" : -1 =
//	[
//		-1 : "Toggle"
//	]
//	lip(integer) : "Lip remaining after move"
//	sounds(Choices) : "Sounds" : 1 =
//	[
//		0 : "No Sounds"
//		1 : "Water"
//		2 : "Lava"
//	]
//	team(string) : "Team"
//	_minlight(integer) : "Minimum light (optional)"
//]

@PointClass base(Appearflags, Targetname) color(0 128 0) size(-4 -4 -4, 4 4 4) = info_null : "Spotlight target" []
@PointClass base(info_null) = info_notnull : "Lightning target" []

@BaseClass base(Appearflags, Target) color(76 76 255) size(-16 -16 -16, 16 16 16) = Items
[
	team(string) : "Team"
]

@PointClass base(Items) model({ "path": ":models/items/adrenal/tris.md2" }) = item_adrenaline : "+1 to max health" []
@PointClass base(Items) model({ "path": ":models/items/c_head/tris.md2" }) = item_ancient_head : "+2 to max health" []
@PointClass base(Items) model({ "path": ":models/items/armor/body/tris.md2" }) = item_armor_body : "Body armor" []
@PointClass base(Items) model({ "path": ":models/items/armor/combat/tris.md2" }) = item_armor_combat : "Combat armor" []
@PointClass base(Items) model({ "path": ":models/items/armor/jacket/tris.md2" }) = item_armor_jacket : "Jacket armor" []
@PointClass base(Items) model({ "path": ":models/items/armor/shard/tris.md2" }) = item_armor_shard : "Armor shard" []
@PointClass base(Items) model({ "path": ":models/items/band/tris.md2" }) = item_bandolier : "Equipment belt" []
@PointClass base(Items) model({ "path": ":models/items/breather/tris.md2" }) = item_breather : "Underwater breather" []
@PointClass base(Items) model({ "path": ":models/items/enviro/tris.md2" }) = item_enviro : "Enviro-Suit" []
@PointClass base(Items) model({ "path": ":models/items/healing/medium/tris.md2" }) = item_health : "+10 health" []
@PointClass base(Items) model({ "path": ":models/items/healing/stimpack/tris.md2" }) = item_health_small : "+2 health" []
@PointClass base(Items) model({ "path": ":models/items/healing/large/tris.md2" }) = item_health_large : "+25 health" []
@PointClass base(Items) model({ "path": ":models/items/mega_h/tris.md2" }) = item_health_mega : "+100 health" []
@PointClass base(Items) model({ "path": ":models/items/invulner/tris.md2" }) = item_invulnerability : "Invulnerability" []
@PointClass base(Items) model({ "path": ":models/items/pack/tris.md2" }) = item_pack : "Heavy backpack" []
@PointClass base(Items) model({ "path": ":models/items/armor/screen/tris.md2" }) = item_power_screen : "Power screen" []
@PointClass base(Items) model({ "path": ":models/items/armor/shield/tris.md2" }) = item_power_shield : "Power shield" []
@PointClass base(Items) model({ "path": ":models/items/quaddama/tris.md2" }) = item_quad : "Quad damage" []
@PointClass base(Items) model({ "path": ":models/items/silencer/tris.md2" }) = item_silencer : "Silencer" []

@BaseClass base(Appearflags, Target) color(0 128 204) size(-16 -16 -16, 16 16 16) = Keys []

@PointClass base(Keys) model({ "path": ":models/items/keys/target/tris.md2" }) = key_airstrike_target : "Tank commander's head" []
@PointClass base(Keys) model({ "path": ":models/items/keys/key/tris.md2" }) = key_blue_key : "Normal door key - blue" []
@PointClass base(Keys) model({ "path": ":models/monsters/commandr/head/tris.md2" }) = key_commander_head : "Tank commander's head" []
@PointClass base(Keys) model({ "path": ":models/items/keys/data_cd/tris.md2" }) = key_data_cd : "Key for computer centers" []
@PointClass base(Keys) model({ "path": ":models/items/keys/spinner/tris.md2" }) = key_data_spinner : "Key for city computer" []
@PointClass base(Keys) model({ "path": ":models/items/keys/pass/tris.md2" }) = key_pass : "Security pass for secret level" []
@PointClass base(Keys) model({ "path": ":models/items/keys/power/tris.md2" }) = key_power_cube : "Warehouse circuits"[]
@PointClass base(Keys) model({ "path": ":models/items/keys/pyramid/tris.md2" }) = key_pyramid : "Key for entrance to jail3" []
@PointClass base(Keys) model({ "path": ":models/items/keys/red_key/tris.md2" }) = key_red_key : "normal door key - red" []

@PointClass base(Appearflags, Target, Targetname) color(0 255 0) size(-8 -8 -8, 8 8 8) = rtlight : "Light Realtime"
[
	spawnflags(Flags) =
	[
		1 : "Start Off" : 0
	]
	light_lev(integer) : "Brightness" : 300
	style(Choices) : "Style" : 0 =
	[
		0 : "Normal"
		1 : "Flicker #1"
		6 : "Flicker #2"
		2 : "Slow Strong Pulse"
		3 : "Candle #1"
		7 : "Candle #2"
		8 : "Candle #3"
		4 : "Fast Strobe"
		5 : "Gentle Pulse #1"
		9 : "Slow Strobe"
		10 : "Fluorescent Flicker"
		11 : "Slow pulse, no black"
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(180 220 228) = light : "Non-displayed light. Lights pointed at a target will be spotlights."
[
	light(integer) : "Brightness" : 300
	_color(color1) : "RGB Color" : "1 1 0.5"
	target(string) : "Lights pointed at a target (info_null / target_position) will be spotlights."
	radius(integer) : "Overrides the default 64 unit radius of a spotlight at the target point." : 64
	_sun(integer) : "Set this key to 1 on a spotlight to make an infinite sun light." : 0
	fade(integer) : "Fades light attenuation. Only affects linear lights."
	scale(integer) : "Scales the 'light' value."
	_deviance(integer) : "Penumbra effect - distance measured in world units for point/spot lights, and degrees for suns (~0.5-3)."
	_samples(integer) : "Penumbra effect - the number of random jitters distributed over the solid arc (~16)."
	_filter(integer) : "Set this key to 1 to toggle on lightmap filtering."
	_filterradius(integer) : "Filters lightmaps within set radius."
	_anglescale(integer) : "Scales light attenuation. Smaller values lessens angle attenuation, larger values for sharper, more faceted lighting (default 1.0)."
	spawnflags(flags) =
	[
		1 : "LINEAR" : 0 : "Gives light linear falloff instead of inverse square."
		2 : "NOANGLE" : 0 : "Ignore angle attenuation."
		4 : "NOGRIDLIGHT" : 0 : "Do not affect the lightgrid (dynamic entity lighting)."
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(180 220 228) = lightJunior : "Non-displayed light. THAT ONLY AFFECTS ENTITIES (lightgrid). Lights pointed at a target will be spotlights."
[
	light(integer) : "Brightness" : 300
	_color(color1) : "RGB Color" : "1 1 0.5"
	target(string) : "Lights pointed at a target (info_null / target_position) will be spotlights."
	radius(integer) : "Overrides the default 64 unit radius of a spotlight at the target point." : 64
	_sun(integer) : "Set this key to 1 on a spotlight to make an infinite sun light." : 0
	fade(integer) : "Fades light attenuation. Only affects linear lights."
	scale(integer) : "Scales the 'light' value."
	_deviance(integer) : "Penumbra effect - distance measured in world units for point/spot lights, and degrees for suns (~0.5-3)."
	_samples(integer) : "Penumbra effect - the number of random jitters distributed over the solid arc (~16)."
	_filter(integer) : "Set this key to 1 to toggle on lightmap filtering."
	_filterradius(integer) : "Filters lightmaps within set radius."
	_anglescale(integer) : "Scales light attenuation. Smaller values lessens angle attenuation, larger values for sharper, more faceted lighting (default 1.0)."
	spawnflags(flags) =
	[
		1 : "LINEAR" : 0 : "Gives light linear falloff instead of inverse square."
		2 : "NOANGLE" : 0 : "Ignore angle attenuation."
		4 : "NOGRIDLIGHT" : 0 : "Do not affect the lightgrid (dynamic entity lighting)."
	]
]

// actor code is still broken...leaving this in because i know *someone* will fix
// this because its pretty damn cool.
// @PointClass base(PlayerClass, Target) = misc_actor : "Actor"
// [
	// health(integer) : "Health" : 100
// ]
// @PointClass base(Appearflags, Targetname) = target_actor : "Actor path"
// [
	// spawnflags(Flags) =
	// [
		// 1 : "Jump" : 0
		// 2 : "Shoot" : 0
		// 4 : "Attack" : 0
		// 16 : "Hold" : 0
		// 32 : "Brutal" : 0
	// ]
	// target(string) : "Next path target"
	// pathtarget(string) : "Action target"
	// wait(integer) : "Pause time"
	// message(string) : "Message"
	// speed(integer) : "Forward (jump)" : 200
	// height(integer) : "Height (jump)" : 200
// ]

// 0224 - changed banner size from (-4 -4 -4, 4 4 4) to (-4 -4 0, 4 4 246)
@PointClass base(Appearflags) color(255 128 0) size(-4 -4 0, 4 4 246) model({ "path": ":models/objects/banner/tris.md2" }) = misc_banner : "Flowing banner" []

//@PointClass base(Appearflags) color(255 128 0) size(-8 -8 -8, 8 8 8) model({ "path": ":models/objects/black/tris.md2" }) = misc_blackhole : "Blackhole" []

@PointClass base(Appearflags) color(255 128 0) size(-16 -16 0, 16 16 16)	model({{
  spawnflags & 32 -> { "path": ":models/deadbods/dude/tris.md2", "frame": 5 },
  spawnflags & 16 -> { "path": ":models/deadbods/dude/tris.md2", "frame": 4 },
  spawnflags &  8 -> { "path": ":models/deadbods/dude/tris.md2", "frame": 3 },
  spawnflags &  4 -> { "path": ":models/deadbods/dude/tris.md2", "frame": 2 },
  spawnflags &  2 -> { "path": ":models/deadbods/dude/tris.md2", "frame": 1 },
                             	":models/deadbods/dude/tris.md2"
  }}) = misc_deadsoldier : "Dead guys! 6 of em!"
[
	spawnflags(Flags) =
	[
		1 : "On Back" : 0
		2 : "On Stomach" : 0
		4 : "Back, Decap" : 0
		8 : "Fetal Position" : 0
		16 : "Sitting, Decap" : 0
		32 : "Impaled" : 0
	]
]

// The following three entities are eye-candy - they don't do anything
@PointClass base(Appearflags) color(255 128 0) size(-32 -32 -16, 32 32 32) model({ "path": ":models/monsters/tank/tris.md2",	"frame":254, "skin": 2}) = misc_eastertank : "Tank sitting down. Make him a chair out of brushes." []
@PointClass base(Appearflags) color(255 128 0) size(-32 -32 0, 32 32 32) model({ "path": ":models/monsters/bitch/tris.md2", "frame":208}) = misc_easterchick : "Chick #1 sitting: Place her near misc_eastertank." []
@PointClass base(Appearflags) color(255 128 0) size(-32 -32 0, 32 32 32) model({ "path": ":models/monsters/bitch/tris.md2", "frame":248}) = misc_easterchick2 : "Chick #2 sitting w/ different pose. Can be placed close to misc_eastertank's for full effect." []

// 0225 - removed "target" key - id concluded being able to target
// something with a movable barrel was a bug and removed that function :(
@PointClass base(Appearflags, Targetname) color(0 128 204) size(-16 -16 0, 16 16 40) model({ "path": ":models/objects/barrels/tris.md2" }) = misc_explobox : "Large exploding box"
[
	mass(integer) : "Mass" : 100
	health(integer) : "Health" : 80
	dmg(integer) : "Damage" : 150
]

// set angle for gib direction, otherwise it just drops
// @PointClass base(Appearflags) color(255 0 0) size(-8 -8 -8, 8 8 8) model({ "path": ":models/objects/gibs/arm/tris.md2" }) = misc_gib_arm : "arm gib, use with target_spawner" []
// @PointClass base(Appearflags) color(255 0 0) size(-8 -8 -8, 8 8 8) model({ "path": ":models/objects/gibs/head/tris.md2" }) = misc_gib_head : "head gib, use with target_spawner" []
// @PointClass base(Appearflags) color(255 0 0) size(-8 -8 -8, 8 8 8) model({ "path": ":models/objects/gibs/arm/tris.md2" }) = misc_gib_leg : "leg gib, use with target_spawner" []



// new
@PointClass base(Appearflags, Targetname, Target) color(255 128 0) size(-16 -16 -24, 16 16 32) model({{
  spawnflags & 32 -> { "path": ":models/monsters/insane/tris.md2", "frame": 0 },
  spawnflags & 16 -> { "path": ":models/monsters/insane/tris.md2", "frame": 74 },
  spawnflags &  8 -> { "path": ":models/monsters/insane/tris.md2", "frame": 252 },
  spawnflags &  4 -> { "path": ":models/monsters/insane/tris.md2", "frame": 38 },
  spawnflags &  2 -> { "path": ":models/monsters/insane/tris.md2", "frame": 0 },
                             	":models/monsters/insane/tris.md2"
  }}) = misc_insane : "Insane Soldiers"
[
	spawnflags(Flags) =
	[
    1 : "Ambush" : 0
    2 : "Trigger Spawn" : 0
    4 : "Crawl" : 0
    8 : "Crucified" : 0
   16 : "Stand Ground" : 0
   32 : "Always Stand" : 0
	]
  deathtarget(string) : "Entity to trigger at death"
  killtarget(string) : "Entity to remove at death"
  item(string) : "Item to spawn at death"
]

// @PointClass base(Appearflags, Targetname) color(255 128 0) size(-64 -64 0, 64 64 128) model({ "path": ":models/objects/satellite/tris.md2" }) = misc_satellite_dish : "Satellite Dish" []
// @PointClass base(Appearflags, Targetname) color(255 128 0) size(-16 -16 0, 16 16 32) model({ "path": ":models/ships/strogg1/tris.md2" }) = misc_strogg_ship : "Strogg ship for flybys"
// [
	// target(string) : "First path target"
	// speed(integer) : "Speed"

// ]

@PointClass base(Appearflags, Targetname) color(255 0 0) size(-32 -32 -24, 32 32 -16) model({ "path": ":models/objects/dmspot/tris.md2", "skin": 1 }) = misc_teleporter : "Teleporter: To hide the teleport pads, place them units 10 units into a brush."	[	target(string) : "Teleport Destination"	]
@PointClass base(Appearflags, Targetname) color(255 0 0) size(-32 -32 -24, 32 32 -16) model({ "path": ":models/objects/dmspot/tris.md2", "skin": 0 }) = misc_teleporter_dest : "Teleport Destination: To hide the teleport pads, place them units 10 units into a brush." []
// @PointClass base(Appearflags) color(255 128 0) size(-176 -120 -24, 176 120 72) model({ "path": ":models/ships/bigviper/tris.md2" }) = misc_bigviper : "Large stationary Viper" []
// @PointClass base(Appearflags, Targetname) color(255 128 0) size(-16 -16 0, 16 16 32) model({ "path": ":models/ships/viper/tris.md2" }) = misc_viper : "Viper for flybys"
// [
	// target(string) : "First path target"
	// speed(integer) : "Speed"

// ]
// @PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) model({ "path": ":models/objects/bomb/tris.md2" }) = misc_viper_bomb : "Viper Bomb"
// [
	// dmg(integer) : "Damage"
// ]

//
// Monsters!
//

@BaseClass base(Appearflags, Target, Targetname) color(255 128 0) size(-16 -16 -24, 16 16 32) = Monsters
[
	spawnflags(Flags) =
	[
		1 : "Ambush" : 0
		2 : "Trigger Spawn" : 0
		4 : "Sight" : 0
	]
	combattarget(string) : "Point combat target"
	deathtarget(string) : "Entity to trigger at death"
	killtarget(string) : "Entity to remove at death"
	item(string) : "Spawn Item"
]

@PointClass base(Monsters) model({ "path": ":models/monsters/berserk/tris.md2" }) = monster_berserk : "Berserker" []
@PointClass base(Monsters) size(-56 -56 0, 56 56 80) model({ "path": ":models/monsters/boss2/tris.md2" }) = monster_boss2 : "Hornet" []

// Just fidgets in one spot and teleports away when triggered
//
// 0221 - removed Monsters class inheritance
//@PointClass base(Appearflags, Targetname) size(-32 -32 0, 32 32 80) model({ "path": ":models/monsters/boss3/rider/tris.md2", "frame": 414}) = monster_boss3_stand : "Stationnary Makron" []
@PointClass base(Monsters) model({ "path": ":models/monsters/brain/tris.md2" }) = monster_brain : "Brains" []
@PointClass base(Monsters) model({ "path": ":models/monsters/bitch/tris.md2" }) = monster_chick : "Iron Maiden" []
@PointClass base(Appearflags, Targetname) color(255 128 0) size(-32 -32 0, 32 32 48) model({ "path": ":models/monsters/commandr/tris.md2" }) = monster_commander_body : "Tank commander's decapitated body" []
@PointClass base(Monsters) model({ "path": ":models/monsters/flipper/tris.md2" }) = monster_flipper : "Barracuda shark" []
@PointClass base(Monsters) model({ "path": ":models/monsters/float/tris.md2" }) = monster_floater : "Technician" []
@PointClass base(Monsters) model({ "path": ":models/monsters/flyer/tris.md2" }) = monster_flyer : "Flyer" []
@PointClass base(Monsters) size(-32 -32 -24, 32 32 64) model({ "path": ":models/monsters/gladiatr/tris.md2" }) = monster_gladiator : "Gladiator" []
@PointClass base(Monsters) model({ "path": ":models/monsters/gunner/tris.md2" }) = monster_gunner : "Gunner" []
@PointClass base(Monsters) model({ "path": ":models/monsters/hover/tris.md2" }) = monster_hover : "Icarus" []
@PointClass base(Monsters) model({ "path": ":models/monsters/infantry/tris.md2", "frame": 64}) = monster_infantry : "Infantry" []
@PointClass base(Monsters) size(-80 -80 0, 90 90 140) model({ "path": ":models/monsters/boss3/jorg/tris.md2" }) = monster_jorg : "Jorg" []
@PointClass base(Monsters) size(-32 -32 0, 32 32 80) model({ "path": ":models/monsters/boss3/rider/tris.md2", "frame": 414}) = monster_makron : "Makron" []
@PointClass base(Monsters) model({ "path": ":models/monsters/medic/tris.md2" }) = monster_medic : "Medic" []
@PointClass base(Monsters) size(-32 -32 -24, 32 32 32) model({ "path": ":models/monsters/mutant/tris.md2" }) = monster_mutant : "Mutant" []
@PointClass base(Monsters) model({ "path": ":models/monsters/parasite/tris.md2" }) = monster_parasite : "Parasite" []
@PointClass base(Monsters) model({ "path": ":models/monsters/soldier/tris.md2", "skin": 0 }) = monster_soldier_light : "Light Soldier" []
@PointClass base(Monsters) model({ "path": ":models/monsters/soldier/tris.md2", "skin": 2 }) = monster_soldier : "Soldier" []
@PointClass base(Monsters) model({ "path": ":models/monsters/soldier/tris.md2", "skin": 4 }) = monster_soldier_ss : "SS Soldier" []
@PointClass base(Monsters) size(-32 -32 -16, 32 32 72) model({ "path": ":models/monsters/tank/tris.md2" }) = monster_tank : "Tank" []
@PointClass base(Monsters) size(-32 -32 -16, 32 32 72) model({ "path": ":models/monsters/tank/tris.md2", "skin": 2 }) = monster_tank_commander : "Tank Commander" []
@PointClass base(Monsters) size(-64 -64 0, 64 64 72) model({ "path": ":models/monsters/boss1/tris.md2" }) = monster_supertank : "Super Tank Boss" []


@PointClass base(Monsters) size(-16 -16 -24, 16 16 40) model({ "path": ":progs/soldier.mdl" }) = monster_army : "Grunt" []
@PointClass base(Monsters) size(-32 -32 -24, 32 32 40) model({ "path": ":progs/dog.mdl" }) = monster_dog : "Nasty Doggie" []
@PointClass base(Monsters) size(-32 -32 -24, 32 32 64) model({ "path": ":progs/ogre.mdl" }) = monster_ogre : "Ogre" []
@PointClass base(Monsters) size(-32 -32 -24, 32 32 64) model({ "path": ":progs/ogre.mdl" }) = monster_ogre_marksman : "Ogre marksman" []
@PointClass base(Monsters) size(-16 -16 -24, 16 16 40) model({ "path": ":progs/knight.mdl" }) = monster_knight : "Knight" []
@PointClass base(Monsters) size(-16 -16 -24, 16 16 40) model({ "path": ":progs/hknight.mdl" }) = monster_hell_knight : "Hell knight" []
@PointClass base(Monsters) size(-16 -16 -24, 16 16 40) model({ "path": ":progs/wizard.mdl" }) = monster_wizard : "Scrag" []
@PointClass base(Monsters) size(-32 -32 -24, 32 32 64) model({ "path": ":progs/demon.mdl" }) = monster_demon1 : "Fiend" []
@PointClass base(Monsters) size(-32 -32 -24, 32 32 64) model({ "path": ":progs/shambler.mdl" }) = monster_shambler : "Shambler" []
@PointClass base(Monsters) size(-128 -128 -24, 128 128 256) model({ "path": ":progs/boss.mdl" }) = monster_boss : "Chthon" []
@PointClass base(Monsters) size(-16 -16 -24, 16 16 40) model({ "path": ":progs/enforcer.mdl" }) = monster_enforcer : "Enforcer" []
@PointClass base(Monsters) size(-32 -32 -24, 32 32 64) model({ "path": ":progs/shalrath.mdl" }) = monster_shalrath : "Vore" []
@PointClass base(Monsters) size(-16 -16 -24, 16 16 24) model({ "path": ":progs/tarbaby.mdl" }) = monster_tarbaby : "Spawn" []
@PointClass base(Monsters) size(-16 -16 -24, 16 16 24) model({ "path": ":progs/fish.mdl" }) = monster_fish : "Rotfish" []
@PointClass base(Monsters) size(-16 -16 -24, 16 16 32) model({ "path": ":progs/oldone.mdl" }) = monster_oldone : "Shub-Niggurath" []
@PointClass base(Monsters) size(-16 -16 -24, 16 16 32) model({ "path": ":progs/zombie.mdl" }) = monster_zombie : "Zombie"
[
	spawnflags(Flags) =
	[
		1 : "Crucified" : 0
		2 : "Ambush" : 0
	]
]
@PointClass base(Monsters) size(-16 -16 -24, 16 16 32) model({ "path": ":progs/zombie.mdl" }) = monster_stroggzombie : "Strogg Zombie"
[
	spawnflags(Flags) =
	[
		2 : "Ambush" : 0
	]
]

// using a "wait" value of -1 on a path corner causes a func_train to go silent between
// itself and the next path corner when the train is restarted. The train's sound will
// resume as soon as it reaches a path corner with a "wait" value other than -1
@PointClass base(Appearflags, Targetname) color(128 76 0) size(-8 -8 -8, 8 8 8) = path_corner : "Path marker"
[
	spawnflags(Flags) =
	[
		1 : "Teleport" : 0
	]
	target(string) : "Next path target"
	pathtarget(string) : "Event to trigger"
	wait(choices) : "Wait" : 0 =
	[
		-1 : "Wait for retrigger"
	]
]

// "target" doesn't work (for now)...a separate trigger is needed
// @PointClass base(Appearflags, Targetname, Target) color(128 76 9) size(-8 -8 -8, 8 8 8) = point_combat : "1st point of combat"
// [
	// spawnflags(Flags) =
	// [
		// 1 : "Hold" : 0
	// ]
// ]

// @PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_blaster : "Blaster"
// [
	// spawnflags(Flags) =
	// [
		// 1 : "No Trail" : 0
		// 2 : "No Effects" : 0
	// ]
	// dmg(integer) : "Damage" : 15
	// speed(integer) : "Speed" : 1000
// ]

//
// misc
//

@SolidClass base(Appearflags) = func_illusionary : "Static nonsolid model"  []

@PointClass base(Appearflags) color(0 150 220) = air_bubbles : "Air bubbles" []
@PointClass base(Appearflags, Targetname) =
	event_lightning : "Chthon's lightning" []
@PointClass base(Appearflags) model({ "path": ":progs/lavaball.mdl" }) = misc_fireball : "Small fireball"
	[ speed(integer) : "Speed" : 40 ]
@PointClass base(Appearflags) size(-8 -8 -8, 8 8 8) model({ "path": ":progs/teleport.mdl" }) = misc_teleporttrain : "Flying teleporter destination"
[
	target(string) : "First stop target"
	targetname(target_source) : "Name"
]
@PointClass base(Appearflags, Targetname) color(220 150 150) = trap_spikeshooter : "Triggered shooter"
[
	spawnflags(Flags) =
	[
		1 : "Spike" : 0
		2 : "Laser" : 0
	]
]
@PointClass base(Appearflags) color(220 150 150) = trap_shooter : "Continuous shooter"
[
	nextthink(integer) : "Delay before first spike"
	wait(integer) : "Delay between spikes"
	spawnflags(Flags) =
	[
		1 : "Spike" : 0
		2 : "Laser" : 0
	]
]

@SolidClass base(Appearflags, Targetname) = trigger_changelevel : "Trigger: Change level"
[
	map(string) : "Next map"
	target(target_destination) : "Target"
	spawnflags(flags) =
	[
		1: "No intermission" : 0
	]
]

@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_earthquake : "(TBD)Level wide earthquake"
[
	speed(integer) : "Severity of quake" : 200
	count(integer) : "Duration" : 5
]

@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_explosion : "(TBD)Explosion"
[
	delay(integer) : "Delay before explosion"
	dmg(integer) : "Radius damage" : 0
]

// @PointClass base(Appearflags, Targetname) color(255 0 255) size(-8 -8 -8, 8 8 8) = target_goal : "Counts a goal completed" []

// @PointClass base(Appearflags, Targetname) color(255 0 255) size(-8 -8 -8, 8 8 8) = target_help : "Computer help message"
// [
	// spawnflags(Flags) =
	// [
		// 1 : "Main Onjective" : 0
	// ]
	// message(string) : "Computer message"
// ]

@PointClass base(Appearflags, Targetname) color(255 0 255) size(-8 -8 -8, 8 8 8) = target_secret : "Counts a secret found"
[
	message(string) : "Message to print" : "You have found a secret."
]

// set speed and angle, otherwise spawned object drops
//
// 0221 - changed "target" key description for clarity
@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_spawner : "Monster/Item spawner"
[
	target(string) : "Monster/Item to spawn"
	speed(integer) : "Speed"
]

// looped sounds are automatically volume 1, attenuation 3 :\

@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_speaker : "Sound player"
[
	spawnflags(Flags) =
	[
		1 : "Looped On" : 0
		2 : "Looped Off" : 0
		4 : "Reliable" : 0
	]
	noise(string) : "Sound (path/file.wav)"
	attenuation(Choices) : "Attenuation" : 1 =
	[
		-1 : "None, send to whole level"
		1 : "Normal fighting sounds"
		2 : "Idle sound level"
		3 : "Ambient sound level"
	]
	volume(integer) : "Volume (0.0 - 1.0)" : 1
]

// "sounds" values other than 1 are silent.  leaving in the other
// options for availability to mods/fixes
//
// 0221 - clarified "count" description
@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_splash : "(TBD)Creates a splash when used"
[
	sounds(choices) : "Type of splash" : 2 =
	[
		1 : "Sparks"
		2 : "Blue water"
		3 : "Brown water"
		4 : "Slime"
		5 : "Lava"
		6 : "Blood"
	]
	count(integer) : "Number of pixels in splash (1 - 255)"
	dmg(integer) : "Radius damage"
]

@SolidClass base(Appearflags, Targetname, Target) color(128 128 128) = trigger_counter : "Counter"
[
	spawnflags(Flags) =
	[
		1 : "No Message" : 0
	]
	count(integer) : "Count before trigger" : 2
]

// @SolidClass base(Appearflags) color(128 128 128) = trigger_gravity : "Change gravity"
// [
	// gravity(integer) : "Gravity (standard = 1.0)" : 1
// ]

@SolidClass base(Appearflags, Targetname) color(128 128 128) = trigger_hurt : "Hurts on touch"
[
	dmg(integer) : "Damage" : 5
]

@SolidClass base(Appearflags, Targetname, Target) color(128 128 128) = trigger_key : "Triggers with key"
[
	spawnflags(Flags) =
	[
		1 : "Start Off" : 0
		2 : "Key Pyramid" : 0
		4 : "Crusher" : 0
		8 : "No Monsters" : 0
		16 : "Key Data Spinner" : 0
		32 : "Toggle" : 0
		64 : "Key Security Pass" : 0
		128 : "Key Data CD" : 0
		//256 - 2048 Appearflags
		4096 : "Key Blue" : 0
		8192 : "Key Red" : 0
		16384 : "Key Commander Head" : 0
		32768 : "Key Data Cube" : 0
	]
]

@SolidClass base(Appearflags) color(128 128 128) = trigger_monsterjump : "Makes monsters jump"
[
	speed(integer) : "Speed thrown forward" : 200
	height(integer) : "Height thrown upward" : 200
]

// 0221 - switched around _relay, _once, and _multiple
@PointClass base(Appearflags, Targetname, Target) color(128 128 128) = trigger_relay : "Relay trigger"
[
	delay(integer) : "Time before triggering"
	message(string) : "Trigger message"
]

// 0303 - removed "sounds" key
@SolidClass base(trigger_relay) = trigger_once : "Single fire trigger"
[
	spawnflags(Flags) =
	[
		4 : "Triggered" : 0
	]
]

@SolidClass base(trigger_once) = trigger_multiple : "Multiple fire trigger"
[
	spawnflags(Flags) =
	[
		1 : "Monster" : 0
		2 : "Not Player" : 0
	]
	wait(integer) : "Seconds between triggers" : 0
]

@SolidClass base(Appearflags) color(128 128 128) = trigger_push : "Push trigger"
[
	spawnflags(Flags) =
	[
		1 : "Push Once" : 0
	]
	speed(integer) : "Speed of push" : 1000
]

//
// Weapons!
//

@BaseClass base(Appearflags, Target) color(76 76 255) size(-16 -16 -16, 16 16 16) = Weapons[]

@PointClass base(Weapons) model({ "path": ":models/weapons/g_shotg/tris.md2" }) = weapon_shotgun : "Shotgun" []
@PointClass base(Weapons) model({ "path": ":models/weapons/g_shotg2/tris.md2" }) = weapon_supershotgun : "Super shotgun" []
@PointClass base(Weapons) model({ "path": ":models/weapons/g_machn/tris.md2" }) = weapon_machinegun : "Machinegun" []
@PointClass base(Weapons) model({ "path": ":models/weapons/g_chain/tris.md2" }) = weapon_chaingun : "Chain gun" []
@PointClass base(Weapons) model({ "path": ":models/weapons/g_launch/tris.md2" }) = weapon_grenadelauncher : "Grenade launcher" []
@PointClass base(Weapons) model({ "path": ":models/weapons/g_rocket/tris.md2" }) = weapon_rocketlauncher : "Rocket launcher" []
@PointClass base(Weapons) model({ "path": ":models/weapons/g_hyperb/tris.md2" }) = weapon_hyperblaster : "Hyperblaster" []
@PointClass base(Weapons) model({ "path": ":models/weapons/g_rail/tris.md2" }) = weapon_railgun : "Rail gun" []
@PointClass base(Weapons) model({ "path": ":models/weapons/g_bfg/tris.md2" }) = weapon_bfg : "Big Freakin Gun!" []


@PointClass model({ "path" : model}) = misc_model : "Generic placeholder for inserting static models to map. Model triangles are baked to map geometry. Uses ASE, MD3, etc..."
[
    model(string) : "subdir path/to/model.md3" : "models/portals/portal_generic.md3"
	angle(integer) : "Yaw Angle" : 45
	angles(string) : "Pitch Yaw Roll" : "0 0 0"
	modelscale(integer) : "Uniform Scale" : 1
	modelscale_vec(string) : "Scale XYZ" : "1 1 1"
	_remap(string) : "Shader Remaps" : "Used to remap textures/shaders in the model. To remap all shaders to a given shader, use '*;models/mymodel/mytexture'. To remap a specific shader, use 'models/mymodel/old;models/mymodel/new'. Any key starting with _remap prefix will work, so if you need more remappings, create _remap2, _remap3 etc keys."
	target(string) : "target" : "Used to attach the misc_model to a brush entity, where its targetname key is the same value."
	_lightmapscale(integer) : "Floating point value, scaling the resolution of lightmaps on this model (if model is using lightmapped shaders) (default 1.0)." : 1
	_castshadows(integer) : "Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. &gt; 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world. For tighter control of where, exactly, certain shadows fall. A value greater than 1 (say, '7') would cast shadows on the world, and on any entity with a corresponding _receiveshadows or _rs value ('7' again, in our case) as well. A _castshadows value less than 1 (say, '-7') would cast shadows only on entities with a corresponding _rs value ('-7') and not cast shadows on the world." : 1
	_receiveshadows(integer) : "Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. &gt; 1 = receive shadows only from corresponding keyed entities (see above) and world. &lt; 1 = receive shadows ONLY from corresponding keyed entities."
	_celshader(string) : "Sets the cel shader used for this geometry. Note: Omit the textures/ prefix."
	_clipdepth(integer) : "Autoclip brushes thickness (default 2.0)." : 2

	spawnflags(flags) =
	[
		1 : "_RMG_BSP" : 0 : "in SoF2, append a _RMG_BSP suffix to shader names instead of _BSP."
		2 : "CLIPMODEL" : 0 : "Clips the model for player/weapon collisions; extruding every face along most perpendicular axial direction. For use on large architectural or terrain models, not for small decorative models."
		4 : "FORCEMETA" : 0 : "Toggles on q3map_forceMeta for lightmapped models. Converts model triangles to bsp metasurfaces."
		8 : "EXTRUDE_FACE_NORMALS" : 0 : "extrude along the model face normals for clipping."
		16 : "EXTRUDE_TERRAIN" : 0 : "extrude each surface of the model along its average axial direction ( up/down/west/east/north/south ); faces with not matching direction (or too steep) are clipped in default mode"
		32 : "COLOR_TO_ALPHA" : 0 : "use the color value as alpha (for terrain blending)."
		64 : "NOSMOOTH" : 0 : "Don't smooth normals when importing (forces all faces planar)."
		128 : "EXTRUDE_VERTEX_NORMALS" : 0 : "extrude along the model vertex normals for clipping; accurate collisions, if normals are fine; bad ones are replaced with 45 degrees to face."
		256 : "PYRAMIDAL_CLIP" : 0 : "Pyramidal clipping brushes (4-sided); accurate collisions"
		512 : "EXTRUDE_DOWNWARDS" : 0 : "for horizontal terrain; when not possible, extrude in default mode."
		1024 : "EXTRUDE_UPWARDS" : 0 : ""
		2048 : "MAX_EXTRUDE" : 0 : "Extrude to the max/min point of every model surface to reduce bsp size (uses axial back plane)."
		4096 : "AXIAL_BACKPLANE" : 0 : "use axial back plane for clipping brushes to effectively reduce bsp size; might cause unwanted collisions, make sure to -debugclip; negative _clipdepth / -clipdepth limits max thickness of resulting brushes (making non-axial backplane, if hit the limit)"		
	]
]

@SolidClass base(trigger_once) = trigger_ladder : "Ladder brush"
[
	spawnflags(Flags) =
	[
		64 : "Start Off" : 0
	]
	waitmin(float) : "time between climb sound (def = depends on sound type)" : "0.45"
	speed(integer) : "velocity speed to climb ladder" : 160
	sounds(choices) : "Sounds" : 1 =
	[
		0 : "None"
		1 : "Metal"
		2 : "Wood"
	]
	angles(string) : "pitch yaw roll"
]

@SolidClass base(trigger_once) = trigger_splashzone : "A simple trigger that cuases a water dripping lens effect splashtype 0 / Default."
[
	spawnflags(Flags) =
	[
		64 : "Start Off" : 0
	]
	splashtype(choices) : "splashtype" : 0 =
	[
		0 : "Water"
		1 : "Blood"
	]
	angles(string) : "pitch yaw roll"
]


@SolidClass base(trigger_once) = trigger_stripkeys : "This trigger strips the player of all keys and then removes itself."
[
	spawnflags(Flags) =
	[
		64 : "Start Off" : 0
	]
	angles(string) : "pitch yaw roll"
]