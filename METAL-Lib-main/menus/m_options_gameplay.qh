/*
Based on the battleMETAL menu and metal-lib library by Peter Roohr 
and adapted for Q2DP by MrC (so if it's broke you know who to blame).
Date: 1/10/2023
Overview: 
  options - gameplay menu
    fun and helpful tweaks to the game experience like:
      showing FPS counter, adjusting HUD color and reticles.
*/

//gameplay Globals

entity gameplay_title;

entity gameplay_fov_lbl;
entity gameplay_fov_more;
entity gameplay_fov_less;

entity gameplay_fps_lbl;
entity gameplay_fps_on;
entity gameplay_fps_off;

entity gameplay_datetime_lbl;
entity gameplay_datetime_on;
entity gameplay_datetime_off;

entity gameplay_crosshair_lbl;
entity gameplay_crosshair_nx;
entity gameplay_crosshair_pr;

entity gameplay_hudalpha_lbl;
entity gameplay_hudalpha_up;
entity gameplay_hudalpha_dn;

entity gameplay_hudcolor_lbl;
entity gameplay_hudcolor_nx;
entity gameplay_hudcolor_pr;

entity gameplay_hudcolorR_nx;
entity gameplay_hudcolorR_pr;
entity gameplay_hudcolorG_nx;
entity gameplay_hudcolorG_pr;
entity gameplay_hudcolorB_nx;
entity gameplay_hudcolorB_pr;

entity gameplay_back;
entity gameplay_accept;

//gameplay constants
string( float id ) gameplay_hudcolor_name={
  switch( id ){
    case 1:
      return "GREEN";
    case 2:
      return "ORANGE";
    case 3:
      return "PURPLE";
    case 4:
      return "BLUE";
	case 5:
		return "CUSTOM";
    default:
      return "WHITE";
  }
  return "NONE";
};

vector( float id ) gameplay_hudcolor_color={
  switch( id ){
    case 1:
      return CLR_HUD_GREEN;
    case 2:
      return CLR_HUD_ORANGE;
    case 3:
      return CLR_HUD_PURPLE;
    case 4:
      return CLR_HUD_BLUE;
    default:
      return CLR_HUD_WHITE;
  }
};

string( float id)gameplay_crosshair_img={
  switch( id ){
    case 1:
      return "gfx/crosshair1";
    case 2:
      return "gfx/crosshair2";
    case 3:
      return "gfx/crosshair3";
    case 4:
      return "gfx/crosshair4";
    case 5:
      return "gfx/crosshair5";
    case 6:
      return "gfx/crosshair6";
    case 7:
      return "gfx/crosshair7";
    case 8:
      return "gfx/crosshair8";
    case 9:
      return "gfx/crosshair9";	  
    default:
      return "gfx/crosshair1";
  }
};

//gameplay callbacks
void() click_gameplay_fov_more={
  local float val;
  val = gameplay_fov_lbl.len;
  val = val + 10;
  if(val > 100 ){
    val = 100;
    gameplay_fov_more.drawme = FALSE;
  }
  gameplay_fov_lbl.len = val;
  cvar_set("fov", ftos(val));
  gameplay_fov_less.drawme = TRUE;
};
void() click_gameplay_fov_less={
  local float val;
  val = gameplay_fov_lbl.len;
  val = val - 10;
  if(val <= 40){
    val = 40;
    gameplay_fov_less.drawme = FALSE;
  }
  gameplay_fov_lbl.len = val;
  cvar_set("fov", ftos(val));
  gameplay_fov_more.drawme = TRUE;
};

void() click_gameplay_date_on={
  cvar_set("showdate", "1");
  cvar_set("showtime", "1");
  gameplay_datetime_lbl.len = TRUE;
  gameplay_datetime_on.drawme = FALSE;
  gameplay_datetime_off.drawme = TRUE;
};
void() click_gameplay_date_off={
  cvar_set("showdate", "0");
  cvar_set("showtime", "0");
  
  gameplay_datetime_lbl.len = FALSE;
  gameplay_datetime_on.drawme = TRUE;
  gameplay_datetime_off.drawme = FALSE;
};

void() click_gameplay_fps_on={
  cvar_set("showfps", "1");
  gameplay_fps_lbl.len = TRUE;
  gameplay_fps_on.drawme = FALSE;
  gameplay_fps_off.drawme = TRUE;
};
void() click_gameplay_fps_off={
  cvar_set("showfps", "0");
  gameplay_fps_lbl.len = FALSE;
  gameplay_fps_on.drawme = TRUE;
  gameplay_fps_off.drawme = FALSE;
};

void() click_gameplay_back={
//  localcmd("saveconfig\n");
  menu_clear_items(M_STATE);
  m_options_f();
};

void() click_gameplay_accept={
  localcmd("saveconfig\n");
  menu_clear_items(M_STATE);
  m_options_f();
};

void() click_gameplay_crosshair_nx={
  local float val;
  val = cvar("crosshair");
  val = val + 1;
  if( val >= 9 ){
    gameplay_crosshair_nx.drawme = FALSE;
  }
  strunzone(gameplay_crosshair_lbl.label);
  gameplay_crosshair_lbl.label = strzone(ftos(val));
  cvar_set("crosshair", ftos(val));
  gameplay_crosshair_lbl.image1 = gameplay_crosshair_img( cvar("crosshair") );
  gameplay_crosshair_pr.drawme = TRUE;
};

void() click_gameplay_crosshair_pr={
  local float val;
  val = cvar("crosshair");
  val = val - 1;
  if( val <= 1 ){
    gameplay_crosshair_pr.drawme = FALSE;
  }
  strunzone(gameplay_crosshair_lbl.label);
  gameplay_crosshair_lbl.label = strzone(ftos(val));
  cvar_set("crosshair", ftos(val));
  gameplay_crosshair_lbl.image1 = gameplay_crosshair_img( cvar("crosshair") );
  gameplay_crosshair_nx.drawme = TRUE;
};

void() click_gameplay_hudalpha_up={
  local float val;
  val = gameplay_hudalpha_lbl.len;
  val = val + 0.05;
  if(val > 1.0){
    val = 1.0;
    gameplay_hudalpha_up.drawme = FALSE;
  }
  gameplay_hudalpha_lbl.len = val;
  strunzone(gameplay_hudalpha_lbl.label);
  gameplay_hudalpha_lbl.label = strzone(sprintf("%0.2f", gameplay_hudalpha_lbl.len) );
  cvar_set("cl_hud_alpha", gameplay_hudalpha_lbl.label);
  
  gameplay_hudalpha_dn.drawme = TRUE;
};

void() click_gameplay_hudalpha_dn={
  local float val;
  val = gameplay_hudalpha_lbl.len;
  val = val - 0.05;
  if(val < 0.1){
    val = 0.1;
    gameplay_hudalpha_dn.drawme = FALSE;
  }
  gameplay_hudalpha_lbl.len = val;
  strunzone(gameplay_hudalpha_lbl.label);
  gameplay_hudalpha_lbl.label = strzone(sprintf("%0.2f", gameplay_hudalpha_lbl.len) );
  cvar_set("cl_hud_alpha", gameplay_hudalpha_lbl.label);
  
  gameplay_hudalpha_up.drawme = TRUE;
};

void() click_gameplay_hudcolor_nx={
  local float val;
  val = gameplay_hudcolor_lbl.len;
  val = val + 1;
  if(val >= 5){
    gameplay_hudcolor_nx.drawme = FALSE;
    val = 5;
  }
  gameplay_hudcolor_lbl.len = val;
  strunzone(gameplay_hudcolor_lbl.label);
  gameplay_hudcolor_lbl.label = strzone(gameplay_hudcolor_name( gameplay_hudcolor_lbl.len ));
  gameplay_hudcolor_lbl.color = gameplay_hudcolor_color( val );
  cvar_set("crosshair_color_red", ftos(gameplay_hudcolor_lbl.color_x) );
  cvar_set("crosshair_color_green", ftos(gameplay_hudcolor_lbl.color_y) );
  cvar_set("crosshair_color_blue", ftos(gameplay_hudcolor_lbl.color_z) );
  cvar_set("cl_hud_color", ftos(val) );
  
  gameplay_hudcolor_pr.drawme = TRUE;
};

void() click_gameplay_hudcolor_pr={
  local float val;
  val = gameplay_hudcolor_lbl.len;
  val = val - 1;
  if(val <= 0){
    gameplay_hudcolor_pr.drawme = FALSE;
    val = 0;
  }
  gameplay_hudcolor_lbl.len = val;
  strunzone(gameplay_hudcolor_lbl.label);
  gameplay_hudcolor_lbl.label = strzone(gameplay_hudcolor_name( gameplay_hudcolor_lbl.len ));
  gameplay_hudcolor_lbl.color = gameplay_hudcolor_color( val );
  cvar_set("crosshair_color_red", ftos(gameplay_hudcolor_lbl.color_x) );
  cvar_set("crosshair_color_green", ftos(gameplay_hudcolor_lbl.color_y) );
  cvar_set("crosshair_color_blue", ftos(gameplay_hudcolor_lbl.color_z) );
  cvar_set("cl_hud_color", ftos(val) );
  
  gameplay_hudcolor_nx.drawme = TRUE;
};

void() incrementHUD_R =
{
	if (gameplay_hudcolor_lbl.color_x >= 1){
		gameplay_hudcolor_lbl.color_x = 1;
		return;
	}

	gameplay_hudcolor_lbl.color_x += 0.1;		
		
	cvar_set("crosshair_color_red", ftos(gameplay_hudcolor_lbl.color_x) );
}

void() incrementHUD_G =
{
	if (gameplay_hudcolor_lbl.color_y >= 1){
		gameplay_hudcolor_lbl.color_y = 1;
		return;
	}

	gameplay_hudcolor_lbl.color_y += 0.1;		
		
	cvar_set("crosshair_color_green", ftos(gameplay_hudcolor_lbl.color_y) );	
}

void() incrementHUD_B =
{
	if (gameplay_hudcolor_lbl.color_z >= 1){
		gameplay_hudcolor_lbl.color_z = 1;
		return;
	}

	gameplay_hudcolor_lbl.color_z += 0.1;		
		
	cvar_set("crosshair_color_blue", ftos(gameplay_hudcolor_lbl.color_z) );	
}

void() decrementHUD_R =
{
	if (gameplay_hudcolor_lbl.color_x <= 0){
		gameplay_hudcolor_lbl.color_x = 0;
		return;
	}

	gameplay_hudcolor_lbl.color_x -= 0.1;			
		
	cvar_set("crosshair_color_red", ftos(gameplay_hudcolor_lbl.color_x) );	
}

void() decrementHUD_G =
{
	if (gameplay_hudcolor_lbl.color_y <= 0){
		gameplay_hudcolor_lbl.color_y = 0;
		return;
	}

	gameplay_hudcolor_lbl.color_y -= 0.1;			
		
	cvar_set("crosshair_color_green", ftos(gameplay_hudcolor_lbl.color_y) );	
}

void() decrementHUD_B =
{
	if (gameplay_hudcolor_lbl.color_z <= 0){
		gameplay_hudcolor_lbl.color_z = 0;
		return;
	}

	gameplay_hudcolor_lbl.color_z -= 0.1;		
		
	cvar_set("crosshair_color_blue", ftos(gameplay_hudcolor_lbl.color_z) );	
}

void() m_gameplay_back_and_accept =
{
	local float offset_from_bottom = 48;	
	
	//BACK and ACCEPT (should anchor with res)
    local string lbl = "BACK";
	local float lblLen = stringwidth(lbl, 0, '32 32 0');
  
	local vector lowerLeft = VIEW_ORG;
	lowerLeft_y = lowerLeft_y + VIEW_MAX_y - offset_from_bottom;
	lowerLeft_x = lowerLeft_x + 24;	
	
	local vector lowerRight = VIEW_MAX;
	lowerRight_x = lowerRight_x - lblLen;
	lowerRight_y = lowerRight_y - offset_from_bottom;
  
	//LOWER LEFT
	gameplay_back = btn_text_callback(lowerLeft, '32 32', "BACK", VIEW_LFT, M_OPTIONS_GAMEPLAY, click_gameplay_back, CLR_MENU_BLUE, '0 1 0', 1, UI_FLAG_SIZE_IMG);
	gameplay_back.fontId = FONT_NUM_BLACKOPS_BOLD;
   
    lbl = "ACCEPT";
	lblLen = stringwidth(lbl, 0, '32 32 0');
   
	//LOWER RIGHT
	gameplay_accept = btn_text_callback(lowerRight, '32 32', "ACCEPT", VIEW_CTX, M_OPTIONS_GAMEPLAY, click_gameplay_accept, CLR_MENU_BLUE, '0 1 0', 1, UI_FLAG_SIZE_IMG);
	gameplay_accept.fontId = FONT_NUM_BLACKOPS_BOLD;
	gameplay_accept.subid = SUB_GRAPHICS_MAIN;	
}